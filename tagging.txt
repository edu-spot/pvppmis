Object tagging helps with categorization, data governance, tracking usage, cost attribution (chargeback), compliance auditing, and more.
Tags are Snowflake objects that can be created at the account or database level and then applied to supported data objects. Each tag can have a key (the tag name) and a value (e.g., department name, environment).
When a tag is associated with an object, its metadata becomes queryable using Snowflake's built-in functions. This makes it easier to automate reporting and manage data assets systematically.

A tag is a schema-level object in Snowflake, which is created once and then applied to many different objects as needed. Therefore, tagging a Snowflake object is a two-step process:
1. Tag Definition (CREATE TAG) 
2. Tag Assignment (APPLY TAG)

Tags act as the baseline for the data governance process by providing means to track sensitive data, classify a group of objects, resource usage monitoring, and enable data masking and row-level security.
You can use tags to label objects like warehouses, databases, schemas, or even tables based on the team, project, or environment.

By combining tagging with Access History and QUERY_HISTORY views, you can analyze:
Who is using which object
What warehouse was used
How much compute was consumed
How to allocate costs back to departments

Tags can be allocated to all the supported services listed below:
Account
Application
Application package
Database
Failover group
Integration
Network policy
Replication group
Role
Share
User
Warehouse
Database role
Schema
Alert
BUDGET instance
CLASSIFICATION instance
Dynamic table
External function and UDF
External table
Git repository
Apache Iceberg™ table
Materialized view
Pipe
Policy
Procedure
Stage
Stream
Table
Task
View
Column


Tags can be created under any database/schema, but they must be unique within the schema. A role with CREATE TAG privilege is required to create tags on the respective schema.

This example creates a tag admin role and grants CREATE TAG and other required privileges:
USE ROLE USERADMIN;
CREATE ROLE tag_admin;
USE ROLE ACCOUNTADMIN;
GRANT CREATE TAG on SCHEMA <database.schema_name> to ROLE tag_admin;

# grant usage access on database and schema to tag_admin role where the tags are created
USE ROLE SYSADMIN;
GRANT USAGE on DATABASE <database> to ROLE tag_admin;
GRANT USAGE on SCHEMA <database.schema_name> to ROLE tag_admin;

This example creates a tag definition using tag_admin role:

# Assume tag_admin role is assigned to executing user
# assume the tags are created in database  DBA_DB and schema  PUBLIC
USE ROLE tag_admin;
USE SCHEMA DBA_DB.PUBLIC;
CREATE TAG department ALLOWED_VALUES 'transfers','finance' COMMENT='department tag';


A role with APPLY TAG privilege is required to apply tags on Snowflake objects. The below example grants the APPLY TAG on account as a global privilege and for a single tag, respectively:

# global privilege - tag_admin role can apply tags on account
USE ROLE ACCOUNTADMIN;
GRANT APPLY TAG on ACCOUNT to ROLE tag_admin;

# grant privileges to apply a single tag
# assume the tag cost_center tag is created in database  DBA_DB and schema  PUBLIC
GRANT APPLY on TAG DBA_DB.PUBLIC.cost_center to ROLE Data_Owner;


This example applies the department tag to warehouses my_warehouse1 and my_warehouse2.

# assume the tags are stored in database  DBA_DB and schema PUBLIC
USE ROLE tag_admin;
# Apply tag while creating a new warehouse
CREATE WAREHOUSE my_warehouse1 WITH TAG(DBA_DB.PUBLIC.department='TDB');

# Apply tag for an existing warehouse by altering the object
ALTER WAREHOUSE my_warehouse2 SET TAG DBA_DB.PUBLIC.department='TDB';


To check what tags are available, the below commands can be used:
# assume the tags are stored in database  DBA_DB and schema PUBLIC
SHOW TAGS in ACCOUNT;
SHOW TAGS in DATABASE GOVERNANCE;
SHOW TAGS in SCHEMA GOVERNANCE.TAG_LIBRARY;

To see all the resources belonging to a specific tag use the below:
SELECT domain,object_name FROM SNOWFLAKE.ACCOUNT_USAGE.TAG_REFERENCES WHERE TAG_DATABASE='DBA_DB' AND TAG_SCHEMA='PUBLIC' AND TAG_NAME='DEPARTMENT' AND TAG_VALUE='finance';


How to Apply Tag-Based Masking Policies

1. Create a tag-based masking policy.
CREATE MASKING POLICY pii_masking_policy as (val string) RETURNS string
 ->
  CASE
    WHEN SYSTEM$GET_TAG_ON_CURRENT_COLUMN('DBA_DB.PUBLIC.security_class') = 'PII' THEN "**Masked**"
    ELSE val
  END;

2. Apply masking policy to tag 'security_class'.
ALTER TAG GOVERNANCE.TAG_LIBRARY.security_class SET
  MASKING POLICY pii_masking_policy;

3. Assign the tag security_class=’PII’ to a column will mask the column data automatically. 
ALTER TABLE User_DB.User_Schema.UserInfo_Table ALTER COLUMN User_Email_Column SET TAG security_class='PII';





REGEXP_SUBSTR(
    QUERY_TEXT,
    'MERGE\\s+INTO\\s+("[^"]+"|[A-Z0-9_\\.]+)',
    1, 1, 'i', 1
  ) AS target_table



merge_target AS (
  SELECT
    QUERY_TEXT,
    POSITION('MERGE INTO' IN UQ) AS merge_pos,
    -- Start 10 chars after 'MERGE INTO' to skip the phrase
    SUBSTRING(UQ, POSITION('MERGE INTO' IN UQ) + 10) AS after_merge
  FROM raw_queries
),
table_extracted AS (
  SELECT
    QUERY_TEXT,
    -- Trim leading space
    LTRIM(after_merge) AS trimmed_after_merge,
    -- Get first word (up to first space or semicolon or newline)
    SUBSTRING(trimmed_after_merge, 1,
      LEAST(
        NULLIF(POSITION(' ' IN trimmed_after_merge), 0),
        NULLIF(POSITION('\n' IN trimmed_after_merge), 0),
        NULLIF(POSITION(';' IN trimmed_after_merge), 0),
        100  -- fallback to max 100 chars if no delimiter
      ) - 1
    ) AS target_table
  FROM merge_target
)




REGEXP_SUBSTR(
      after_merge,
      '^("[^"]+"(\\."[^"]+"){0,2}|[A-Z0-9_]+(\\.[A-Z0-9_]+){0,2})',
      1, 1, 'i'
    ) AS target_table



REGEXP_SUBSTR(column_name, 'IDENTIFIER\\(''([^'']+)''\\)', 1, 1, 'e', 1)
